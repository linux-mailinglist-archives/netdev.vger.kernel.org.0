Return-Path: <netdev-owner@vger.kernel.org>
X-Original-To: lists+netdev@lfdr.de
Delivered-To: lists+netdev@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 6E5F14B7AD6
	for <lists+netdev@lfdr.de>; Tue, 15 Feb 2022 23:57:16 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S244716AbiBOW5W (ORCPT <rfc822;lists+netdev@lfdr.de>);
        Tue, 15 Feb 2022 17:57:22 -0500
Received: from mxb-00190b01.gslb.pphosted.com ([23.128.96.19]:33824 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S244709AbiBOW5P (ORCPT
        <rfc822;netdev@vger.kernel.org>); Tue, 15 Feb 2022 17:57:15 -0500
Received: from mail-lf1-x12b.google.com (mail-lf1-x12b.google.com [IPv6:2a00:1450:4864:20::12b])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 4AB1ECCC7A
        for <netdev@vger.kernel.org>; Tue, 15 Feb 2022 14:56:53 -0800 (PST)
Received: by mail-lf1-x12b.google.com with SMTP id f37so424006lfv.8
        for <netdev@vger.kernel.org>; Tue, 15 Feb 2022 14:56:53 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=kinvolk.io; s=google;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=qxTtG22ulrT4W9Bt3fQi45ntOCJnAa4PMxzOk6FSweE=;
        b=gk+hYaiFiAXgXi0ntTBnOOuZ1H/rqu/UIyr5goff0bQVdrgU+OWTIhc/REv+RK4XDl
         9RXJuAsrmSkUFxApkdrFxUInrdraSx9VLj6qO0bnKH18u3Xl+ewWTQj+PDCR6C7aTsBA
         3+x+RZE/UYk3yWkWhVAUh1Izn56KPcdFzQrEQ=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20210112;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=qxTtG22ulrT4W9Bt3fQi45ntOCJnAa4PMxzOk6FSweE=;
        b=t2Z8wMHVjBYlYTr158uAIhxHB5KamE3N/dvBdlKIvPtDnwgD1t951O75Wb+Vrfxxy0
         MGth0yRZkdKqDpMVDQz1zOBQdQjHP+WM6Zx1K3+qj7lYaY0hpyZPQQSZapicCI1qwMG0
         LEe8fqHF/LOVdNEllkRczfc6TkwBjpBwT9YzH0qUQLnot6Eih+WbSEwzn+fQv8cQos6B
         FOjLmprbYBNNMnLaB1S7FwoJz64s6DQRkNnF65PTGpJx/6pNUYqXmA3ckiqmK4tOOa7N
         jZeXYruaqL9D75Hw3jKQMo1doEOkiYTiMchTzzh5JbGkx40GmgIM3X3aVS7h4/bIqMYy
         xJEg==
X-Gm-Message-State: AOAM532YzNVuyPCXMq23x0LrTYAOPuF4gXOcrzGHixAlZNjNwtbQPuOu
        57l7Qy9e3VuBu/mKxV+ad6/lO6xkV6i/Sp+GE41CgpzsSTE=
X-Google-Smtp-Source: ABdhPJyvNhyz22eV5ohQ0H6HMNIgnuNu0/QFQZhOeexXnKriEQRD4WG/c8gBoULVBAyyoetDNZquY4t8qksio0d2Jdo=
X-Received: by 2002:ac2:5bc7:0:b0:442:c31e:876a with SMTP id
 u7-20020ac25bc7000000b00442c31e876amr4399lfn.382.1644965811853; Tue, 15 Feb
 2022 14:56:51 -0800 (PST)
MIME-Version: 1.0
References: <20220209222646.348365-1-mauricio@kinvolk.io> <20220209222646.348365-8-mauricio@kinvolk.io>
 <CAEf4BzZNHHKkOS=bXmKevStq-8hwm58mTz_tnMFs0vETL_z8LQ@mail.gmail.com>
In-Reply-To: <CAEf4BzZNHHKkOS=bXmKevStq-8hwm58mTz_tnMFs0vETL_z8LQ@mail.gmail.com>
From:   =?UTF-8?Q?Mauricio_V=C3=A1squez_Bernal?= <mauricio@kinvolk.io>
Date:   Tue, 15 Feb 2022 17:56:40 -0500
Message-ID: <CAHap4zuHWU_+vCNLF4m=8uS5Z1GaERanWVSR34-Z=nR2MkWHSA@mail.gmail.com>
Subject: Re: [PATCH bpf-next v6 7/7] selftests/bpf: Test "bpftool gen min_core_btf"
To:     Andrii Nakryiko <andrii.nakryiko@gmail.com>
Cc:     Networking <netdev@vger.kernel.org>, bpf <bpf@vger.kernel.org>,
        Alexei Starovoitov <ast@kernel.org>,
        Daniel Borkmann <daniel@iogearbox.net>,
        Andrii Nakryiko <andrii@kernel.org>,
        Quentin Monnet <quentin@isovalent.com>,
        Rafael David Tinoco <rafaeldtinoco@gmail.com>,
        Lorenzo Fontana <lorenzo.fontana@elastic.co>,
        Leonardo Di Donato <leonardo.didonato@elastic.co>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
X-Spam-Status: No, score=-2.1 required=5.0 tests=BAYES_00,DKIM_SIGNED,
        DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,RCVD_IN_DNSWL_NONE,
        SPF_HELO_NONE,SPF_PASS,T_SCC_BODY_TEXT_LINE autolearn=ham
        autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <netdev.vger.kernel.org>
X-Mailing-List: netdev@vger.kernel.org

On Fri, Feb 11, 2022 at 7:42 PM Andrii Nakryiko
<andrii.nakryiko@gmail.com> wrote:
>
> On Wed, Feb 9, 2022 at 2:27 PM Mauricio V=C3=A1squez <mauricio@kinvolk.io=
> wrote:
> >
> > This commit reuses the core_reloc test to check if the BTF files
> > generated with "bpftool gen min_core_btf" are correct. This introduces
> > test_core_btfgen() that runs all the core_reloc tests, but this time
> > the source BTF files are generated by using "bpftool gen min_core_btf".
> >
> > The goal of this test is to check that the generated files are usable,
> > and not to check if the algorithm is creating an optimized BTF file.
> >
> > Signed-off-by: Mauricio V=C3=A1squez <mauricio@kinvolk.io>
> > Signed-off-by: Rafael David Tinoco <rafael.tinoco@aquasec.com>
> > Signed-off-by: Lorenzo Fontana <lorenzo.fontana@elastic.co>
> > Signed-off-by: Leonardo Di Donato <leonardo.didonato@elastic.co>
> > ---
> >  .../selftests/bpf/prog_tests/core_reloc.c     | 46 ++++++++++++++++++-
> >  1 file changed, 45 insertions(+), 1 deletion(-)
> >
> > diff --git a/tools/testing/selftests/bpf/prog_tests/core_reloc.c b/tool=
s/testing/selftests/bpf/prog_tests/core_reloc.c
> > index b8bdd1c3efca..10a1d5fb788e 100644
> > --- a/tools/testing/selftests/bpf/prog_tests/core_reloc.c
> > +++ b/tools/testing/selftests/bpf/prog_tests/core_reloc.c
> > @@ -2,6 +2,7 @@
> >  #include <test_progs.h>
> >  #include "progs/core_reloc_types.h"
> >  #include "bpf_testmod/bpf_testmod.h"
> > +#include <linux/limits.h>
> >  #include <sys/mman.h>
> >  #include <sys/syscall.h>
> >  #include <bpf/btf.h>
> > @@ -354,6 +355,8 @@ static int duration =3D 0;
> >         .fails =3D true,                                               =
   \
> >  }
> >
> > +#define BTFGEN_BTF_PATH "/tmp/btfgen.btf"
>
> let's not use fixed file path, better use mkstemp() to create
> temporary file (see core_autosize.c for an example)
>

You're right.


> > +
> >  struct core_reloc_test_case;
> >
> >  typedef int (*setup_test_fn)(struct core_reloc_test_case *test);
> > @@ -836,7 +839,21 @@ static size_t roundup_page(size_t sz)
> >         return (sz + page_size - 1) / page_size * page_size;
> >  }
> >
> > -void test_core_reloc(void)
> > +static int run_btfgen(const char *src_btf, const char *dst_btf, const =
char *objpath)
> > +{
> > +       char command[4096];
> > +       int n;
> > +
> > +       n =3D snprintf(command, sizeof(command),
> > +                    "./tools/build/bpftool/bpftool gen min_core_btf %s=
 %s %s",
> > +                    src_btf, dst_btf, objpath);
> > +       if (n < 0 || n >=3D sizeof(command))
> > +               return -1;
> > +
> > +       return system(command);
> > +}
> > +
> > +static void _test_core_reloc(bool btfgen)
>
> ugh, please don't do leading underscore. Call it
> "run_core_reloc_tests" or whatever, it's easy.
>
> another naming nit (I did get confused for a second because of this):
> use_btfgen, otherwise below in the code my first guess was that
> "btfgen" is actually a path to bpftool or something like that
>
>
> >  {
> >         const size_t mmap_sz =3D roundup_page(sizeof(struct data));
> >         DECLARE_LIBBPF_OPTS(bpf_object_open_opts, open_opts);
> > @@ -863,6 +880,22 @@ void test_core_reloc(void)
> >                         continue;
> >                 }
> >
> > +               /* generate a "minimal" BTF file and use it as source *=
/
> > +               if (btfgen) {
> > +                       if (!test_case->btf_src_file || test_case->fail=
s) {
> > +                               test__skip();
> > +                               continue;
> > +                       }
> > +
> > +                       unlink(BTFGEN_BTF_PATH);
> > +                       err =3D run_btfgen(test_case->btf_src_file, BTF=
GEN_BTF_PATH,
> > +                                        test_case->bpf_obj_file);
> > +                       if (!ASSERT_OK(err, "run_btfgen"))
> > +                               goto cleanup;
> > +
> > +                       test_case->btf_src_file =3D BTFGEN_BTF_PATH;
> > +               }
> > +
> >                 if (test_case->setup) {
> >                         err =3D test_case->setup(test_case);
> >                         if (CHECK(err, "test_setup", "test #%d setup fa=
iled: %d\n", i, err))
> > @@ -954,8 +987,19 @@ void test_core_reloc(void)
> >                         CHECK_FAIL(munmap(mmap_data, mmap_sz));
> >                         mmap_data =3D NULL;
> >                 }
> > +               unlink(BTFGEN_BTF_PATH);
> >                 bpf_link__destroy(link);
> >                 link =3D NULL;
> >                 bpf_object__close(obj);
> >         }
> >  }
> > +
> > +void test_core_reloc(void)
> > +{
> > +       _test_core_reloc(false);
> > +}
> > +
> > +void test_core_btfgen(void)
> > +{
> > +       _test_core_reloc(true);
> > +}
> > --
> > 2.25.1
> >
