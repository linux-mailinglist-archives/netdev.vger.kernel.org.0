Return-Path: <netdev-owner@vger.kernel.org>
X-Original-To: lists+netdev@lfdr.de
Delivered-To: lists+netdev@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id D85A72CB1A2
	for <lists+netdev@lfdr.de>; Wed,  2 Dec 2020 01:41:34 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726908AbgLBAkl (ORCPT <rfc822;lists+netdev@lfdr.de>);
        Tue, 1 Dec 2020 19:40:41 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:56240 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726166AbgLBAkk (ORCPT
        <rfc822;netdev@vger.kernel.org>); Tue, 1 Dec 2020 19:40:40 -0500
Received: from mail-yb1-xb43.google.com (mail-yb1-xb43.google.com [IPv6:2607:f8b0:4864:20::b43])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 5EA89C0613D4;
        Tue,  1 Dec 2020 16:40:00 -0800 (PST)
Received: by mail-yb1-xb43.google.com with SMTP id l14so58783ybq.3;
        Tue, 01 Dec 2020 16:40:00 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=7IgGP7aV6Y93O2jr4hz7Ro1XSzZ05b6NeWqgiqqHIrI=;
        b=Sbtxhy8tDANT+4u/57CIhzLr+EpvDT9d9ywEsHQAXVv5UkMM/SFlMZKiOthEUiNf0g
         z6U1/+jYACPKrmxuoOvOscL8tZYPZt4NOc0QXf05qIRs/UWS8hQi7aY/zK5/SEM04i+h
         QNPS3OpW4EgPmG6jIkOmCJ1zv4HaKtwMUd++oa6pg9tHbYOEIwOfo37tXqstUymXzyfG
         Qkgy1WxQn7ZB/8Ehq+gw5dEJghDtZtewLgRBjj2orKVJm48iDYI0Xj3BqtA2YSXX5tTv
         ZWdB3GN/l/Jc5e5M7TMZT/SxoU0HNAbkqbo7zw2ngOeAamhb5+SZvfs383tiowCA7ckh
         FcNg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=7IgGP7aV6Y93O2jr4hz7Ro1XSzZ05b6NeWqgiqqHIrI=;
        b=e1sfS5L1WApBKTMESLr+3AAv2Hg7O2IgzjFJ5O6525qfYyL6bDWOOpuKId6v8tMZy/
         ADZASp4HMwcAGpkMW53ls1nwBvr7r2pR+Ag+Z93PISnYJFv4z8p2tl0l0RzxhS3or32h
         o7PIdSl5f/CSwjhrdcChyhtSfEaspWMhT5vY4Av478GQcGlj+5EY+wwho2p75gYiBl1D
         MSdE6NTsB0inxO0Jhk02bgmt7NVo+wU5RIl3ZnOQp+stfiI5H+F06hK92FNKGftsTpR7
         NPVaYRPweQQqdl+TluFBGqlsKD+MLSYE/RU1swSCKF033S04uJ9i7bfYHJGjgVxFgdaI
         jckQ==
X-Gm-Message-State: AOAM530SkBiGcDc/7h9Ke/aSuMdRmTkwF+uR4pSBuTE5Rj8Tr1WoBKSS
        2HLIAynXKSbJQpZY69aMb+vAw2md/til5RmuFcU=
X-Google-Smtp-Source: ABdhPJwYnARzBzXOG68YuCMOIBrmeAPQrGmH4OHC/F00lSJ4wOiauRLFkxR+/xzr2bCJWqENaiM+mfTQZQ84g5Vh+d4=
X-Received: by 2002:a25:7717:: with SMTP id s23mr4729ybc.459.1606869598962;
 Tue, 01 Dec 2020 16:39:58 -0800 (PST)
MIME-Version: 1.0
References: <20201130161720.8688-1-toke@redhat.com>
In-Reply-To: <20201130161720.8688-1-toke@redhat.com>
From:   Andrii Nakryiko <andrii.nakryiko@gmail.com>
Date:   Tue, 1 Dec 2020 16:39:48 -0800
Message-ID: <CAEf4BzYKWnNQqLOxgUaj=qOP15wpMY8axYxfRDukvw8Wypbjgw@mail.gmail.com>
Subject: Re: [PATCH bpf] libbpf: sanitise map names before pinning
To:     =?UTF-8?B?VG9rZSBIw7hpbGFuZC1Kw7hyZ2Vuc2Vu?= <toke@redhat.com>
Cc:     Daniel Borkmann <daniel@iogearbox.net>,
        Alexei Starovoitov <ast@fb.com>,
        Andrii Nakryiko <andrii@kernel.org>, bpf <bpf@vger.kernel.org>,
        Networking <netdev@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Precedence: bulk
List-ID: <netdev.vger.kernel.org>
X-Mailing-List: netdev@vger.kernel.org

On Mon, Nov 30, 2020 at 8:17 AM Toke H=C3=B8iland-J=C3=B8rgensen <toke@redh=
at.com> wrote:
>
> When we added sanitising of map names before loading programs to libbpf, =
we
> still allowed periods in the name. While the kernel will accept these for
> the map names themselves, they are not allowed in file names when pinning

That sounds like an unnecessary difference in kernel behavior. If the
kernel allows maps with '.' in the name, why not allow to pin it?
Should we fix that in the kernel?

> maps. This means that bpf_object__pin_maps() will fail if called on an
> object that contains internal maps (such as sections .rodata).
>
> Fix this by replacing periods with underscores when constructing map pin
> paths. This only affects the paths generated by libbpf when
> bpf_object__ping_maps() is called with a path argument. Any pin paths set
> by bpf_map__set_pin_path() are unaffected, and it will still be up to the
> caller to avoid invalid characters in those.
>
> Fixes: 113e6b7e15e2 ("libbpf: Sanitise internal map names so they are not=
 rejected by the kernel")
> Signed-off-by: Toke H=C3=B8iland-J=C3=B8rgensen <toke@redhat.com>
> ---
>  tools/lib/bpf/libbpf.c | 8 ++++++--
>  1 file changed, 6 insertions(+), 2 deletions(-)
>
> diff --git a/tools/lib/bpf/libbpf.c b/tools/lib/bpf/libbpf.c
> index 8d05132e1945..8a3b4713b356 100644
> --- a/tools/lib/bpf/libbpf.c
> +++ b/tools/lib/bpf/libbpf.c
> @@ -7665,8 +7665,8 @@ int bpf_object__pin_maps(struct bpf_object *obj, co=
nst char *path)
>         }
>
>         bpf_object__for_each_map(map, obj) {
> +               char buf[PATH_MAX], *s =3D buf;
>                 char *pin_path =3D NULL;
> -               char buf[PATH_MAX];
>
>                 if (path) {
>                         int len;
> @@ -7680,6 +7680,8 @@ int bpf_object__pin_maps(struct bpf_object *obj, co=
nst char *path)
>                                 err =3D -ENAMETOOLONG;
>                                 goto err_unpin_maps;
>                         }
> +                       while ((s =3D strstr(s, ".")))
> +                           *s =3D '_';

Let's extract this into a helper method?

>                         pin_path =3D buf;
>                 } else if (!map->pin_path) {
>                         continue;
> @@ -7712,8 +7714,8 @@ int bpf_object__unpin_maps(struct bpf_object *obj, =
const char *path)
>                 return -ENOENT;
>
>         bpf_object__for_each_map(map, obj) {
> +               char buf[PATH_MAX], *s =3D buf;
>                 char *pin_path =3D NULL;
> -               char buf[PATH_MAX];
>
>                 if (path) {
>                         int len;
> @@ -7724,6 +7726,8 @@ int bpf_object__unpin_maps(struct bpf_object *obj, =
const char *path)
>                                 return -EINVAL;
>                         else if (len >=3D PATH_MAX)
>                                 return -ENAMETOOLONG;
> +                       while ((s =3D strstr(s, ".")))
> +                           *s =3D '_';
>                         pin_path =3D buf;
>                 } else if (!map->pin_path) {
>                         continue;
> --
> 2.29.2
>
