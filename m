Return-Path: <netdev-owner@vger.kernel.org>
X-Original-To: lists+netdev@lfdr.de
Delivered-To: lists+netdev@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 9597F4B0028
	for <lists+netdev@lfdr.de>; Wed,  9 Feb 2022 23:29:28 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S235625AbiBIW2u (ORCPT <rfc822;lists+netdev@lfdr.de>);
        Wed, 9 Feb 2022 17:28:50 -0500
Received: from gmail-smtp-in.l.google.com ([23.128.96.19]:58766 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S235635AbiBIW2Z (ORCPT
        <rfc822;netdev@vger.kernel.org>); Wed, 9 Feb 2022 17:28:25 -0500
Received: from mail-qt1-x829.google.com (mail-qt1-x829.google.com [IPv6:2607:f8b0:4864:20::829])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id D9B18E01A2F0
        for <netdev@vger.kernel.org>; Wed,  9 Feb 2022 14:27:49 -0800 (PST)
Received: by mail-qt1-x829.google.com with SMTP id j12so3371564qtr.2
        for <netdev@vger.kernel.org>; Wed, 09 Feb 2022 14:27:49 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=kinvolk.io; s=google;
        h=from:to:cc:subject:date:message-id:in-reply-to:references
         :mime-version:content-transfer-encoding;
        bh=kTBJ1Pql1z9VTh/Shv6+u258Fz4OzaJBfE1p/mIR/xk=;
        b=Oa8IeBWnsdLRbrHtaHc1jMJxjRgFqEo1MKfKh9LagsiF3U5gHAy60XoONhXFvgWsQI
         90X4XGvbl8g2QrW876tEqXxJ4n0zmnlhL2QLwOdj8Z1aJyeGlO6Hg66uXglovcU2XrBq
         sJ/7HdVRDgM1oHl2bmKfabRJBCskqzcg3vuTQ=
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20210112;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=kTBJ1Pql1z9VTh/Shv6+u258Fz4OzaJBfE1p/mIR/xk=;
        b=JufsVPAEFqUdi4F8ayBG5QQ9Zn1rmb+9swns/WZBwDn2NuzeEQh9Gdug1s6656ZPh+
         iQ73Bp5ucgTMVyFEl1NGaJX1o98j0A9A65ebmTx7xy62lA6HeGPJojG6lYt8n0ykUgzX
         98TEq6mTPfxXLVLbkD/SwAFobHEO9r+achQVk6PxHw+J6zDGAnIFDytg57hBoIXW2rXR
         phZz0jav0JS46kh2FpOH81hvPcCt+7zrURBnogp2ITQcUJTk2XqqjkUhKhItegz6cj55
         j6XV+4ADBZALog2KbSbvsMKbcnB4P1uOxeX0KAaUEWvWAxvbian532zTbTxza/ohFl/O
         414Q==
X-Gm-Message-State: AOAM531H8irUN0XjSnh4osctvuDcvybH7+me+wOjgrFviAwM8JtLkUMM
        nLRYE8TM6d5OAmsansTdFiiAFSsE+/FiE9QFHavf5z0g4M5o1PdbPyvNZFqQ+QPkRTeboXvqA4+
        o2VjUKmA8+zIRRZuEDDDmQgKbmdMoX9lSg6x5+mO/zIg4HJZYIqeC0XoyZlzTD7aDS+znPw==
X-Google-Smtp-Source: ABdhPJz48N3gIue1a+5AB2HgSeqz3q1RcamQcQmnJaNRN3bI8739fyCxPhGVmU8xRfpsIxd/yTUGBA==
X-Received: by 2002:ac8:5bc5:: with SMTP id b5mr2990286qtb.572.1644445666831;
        Wed, 09 Feb 2022 14:27:46 -0800 (PST)
Received: from localhost.localdomain ([181.136.110.101])
        by smtp.gmail.com with ESMTPSA id h6sm9706287qtx.65.2022.02.09.14.27.45
        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
        Wed, 09 Feb 2022 14:27:46 -0800 (PST)
From:   =?UTF-8?q?Mauricio=20V=C3=A1squez?= <mauricio@kinvolk.io>
To:     netdev@vger.kernel.org, bpf@vger.kernel.org
Cc:     Alexei Starovoitov <ast@kernel.org>,
        Daniel Borkmann <daniel@iogearbox.net>,
        Andrii Nakryiko <andrii@kernel.org>,
        Quentin Monnet <quentin@isovalent.com>,
        Rafael David Tinoco <rafaeldtinoco@gmail.com>,
        Lorenzo Fontana <lorenzo.fontana@elastic.co>,
        Leonardo Di Donato <leonardo.didonato@elastic.co>
Subject: [PATCH bpf-next v6 7/7] selftests/bpf: Test "bpftool gen min_core_btf"
Date:   Wed,  9 Feb 2022 17:26:46 -0500
Message-Id: <20220209222646.348365-8-mauricio@kinvolk.io>
X-Mailer: git-send-email 2.25.1
In-Reply-To: <20220209222646.348365-1-mauricio@kinvolk.io>
References: <20220209222646.348365-1-mauricio@kinvolk.io>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
X-Spam-Status: No, score=-2.1 required=5.0 tests=BAYES_00,DKIM_SIGNED,
        DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,RCVD_IN_DNSWL_NONE,
        SPF_HELO_NONE,SPF_PASS,T_SCC_BODY_TEXT_LINE autolearn=unavailable
        autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <netdev.vger.kernel.org>
X-Mailing-List: netdev@vger.kernel.org

This commit reuses the core_reloc test to check if the BTF files
generated with "bpftool gen min_core_btf" are correct. This introduces
test_core_btfgen() that runs all the core_reloc tests, but this time
the source BTF files are generated by using "bpftool gen min_core_btf".

The goal of this test is to check that the generated files are usable,
and not to check if the algorithm is creating an optimized BTF file.

Signed-off-by: Mauricio VÃ¡squez <mauricio@kinvolk.io>
Signed-off-by: Rafael David Tinoco <rafael.tinoco@aquasec.com>
Signed-off-by: Lorenzo Fontana <lorenzo.fontana@elastic.co>
Signed-off-by: Leonardo Di Donato <leonardo.didonato@elastic.co>
---
 .../selftests/bpf/prog_tests/core_reloc.c     | 46 ++++++++++++++++++-
 1 file changed, 45 insertions(+), 1 deletion(-)

diff --git a/tools/testing/selftests/bpf/prog_tests/core_reloc.c b/tools/testing/selftests/bpf/prog_tests/core_reloc.c
index b8bdd1c3efca..10a1d5fb788e 100644
--- a/tools/testing/selftests/bpf/prog_tests/core_reloc.c
+++ b/tools/testing/selftests/bpf/prog_tests/core_reloc.c
@@ -2,6 +2,7 @@
 #include <test_progs.h>
 #include "progs/core_reloc_types.h"
 #include "bpf_testmod/bpf_testmod.h"
+#include <linux/limits.h>
 #include <sys/mman.h>
 #include <sys/syscall.h>
 #include <bpf/btf.h>
@@ -354,6 +355,8 @@ static int duration = 0;
 	.fails = true,							\
 }
 
+#define BTFGEN_BTF_PATH "/tmp/btfgen.btf"
+
 struct core_reloc_test_case;
 
 typedef int (*setup_test_fn)(struct core_reloc_test_case *test);
@@ -836,7 +839,21 @@ static size_t roundup_page(size_t sz)
 	return (sz + page_size - 1) / page_size * page_size;
 }
 
-void test_core_reloc(void)
+static int run_btfgen(const char *src_btf, const char *dst_btf, const char *objpath)
+{
+	char command[4096];
+	int n;
+
+	n = snprintf(command, sizeof(command),
+		     "./tools/build/bpftool/bpftool gen min_core_btf %s %s %s",
+		     src_btf, dst_btf, objpath);
+	if (n < 0 || n >= sizeof(command))
+		return -1;
+
+	return system(command);
+}
+
+static void _test_core_reloc(bool btfgen)
 {
 	const size_t mmap_sz = roundup_page(sizeof(struct data));
 	DECLARE_LIBBPF_OPTS(bpf_object_open_opts, open_opts);
@@ -863,6 +880,22 @@ void test_core_reloc(void)
 			continue;
 		}
 
+		/* generate a "minimal" BTF file and use it as source */
+		if (btfgen) {
+			if (!test_case->btf_src_file || test_case->fails) {
+				test__skip();
+				continue;
+			}
+
+			unlink(BTFGEN_BTF_PATH);
+			err = run_btfgen(test_case->btf_src_file, BTFGEN_BTF_PATH,
+					 test_case->bpf_obj_file);
+			if (!ASSERT_OK(err, "run_btfgen"))
+				goto cleanup;
+
+			test_case->btf_src_file = BTFGEN_BTF_PATH;
+		}
+
 		if (test_case->setup) {
 			err = test_case->setup(test_case);
 			if (CHECK(err, "test_setup", "test #%d setup failed: %d\n", i, err))
@@ -954,8 +987,19 @@ void test_core_reloc(void)
 			CHECK_FAIL(munmap(mmap_data, mmap_sz));
 			mmap_data = NULL;
 		}
+		unlink(BTFGEN_BTF_PATH);
 		bpf_link__destroy(link);
 		link = NULL;
 		bpf_object__close(obj);
 	}
 }
+
+void test_core_reloc(void)
+{
+	_test_core_reloc(false);
+}
+
+void test_core_btfgen(void)
+{
+	_test_core_reloc(true);
+}
-- 
2.25.1

