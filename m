Return-Path: <netdev-owner@vger.kernel.org>
X-Original-To: lists+netdev@lfdr.de
Delivered-To: lists+netdev@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id 8D4802CC9A3
	for <lists+netdev@lfdr.de>; Wed,  2 Dec 2020 23:32:30 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728110AbgLBWcH (ORCPT <rfc822;lists+netdev@lfdr.de>);
        Wed, 2 Dec 2020 17:32:07 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:33132 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1726603AbgLBWcH (ORCPT
        <rfc822;netdev@vger.kernel.org>); Wed, 2 Dec 2020 17:32:07 -0500
Received: from mail-yb1-xb42.google.com (mail-yb1-xb42.google.com [IPv6:2607:f8b0:4864:20::b42])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 0A802C0613D6;
        Wed,  2 Dec 2020 14:31:27 -0800 (PST)
Received: by mail-yb1-xb42.google.com with SMTP id o144so173070ybg.7;
        Wed, 02 Dec 2020 14:31:27 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc:content-transfer-encoding;
        bh=z2LpFd9Sz9xB/9GLNABCtFkz6LKCwyQb/SXcRoQCHok=;
        b=p92b3WJnk0UYqMx3Pt46Plm7irJQEkoqUpKGTuN4CGW9oHlPgYU98JgJv5j4Yt4Jce
         tQykNL6LXN9Um7fLTnJSK9tv5Pc0nMzs3KI1VNKg77rtyXVEmtvIUgzMT9bLcZLbOWir
         4g1Xgo+xC3pJ+bSnADhxVCxwprumFWwmoO7Rd2zFxiRhtlLynLRqVSRIHOxLRpLbB57t
         kNhdbYkMRqaLV+RZiTT8SPFjb/nrc02CTd70FCC4ie3LCg6NZtD2CiM9DccdMxpUXpju
         DDzEkr0WNbaHJumigvJvM8iyteFW3XAg39EqyUj9pbjabL3r9vNOsR+jXTYEkB0N5bkk
         HEHg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc:content-transfer-encoding;
        bh=z2LpFd9Sz9xB/9GLNABCtFkz6LKCwyQb/SXcRoQCHok=;
        b=la25JkuhUIWKL9LwEQbSDeO9g81uPhQ9iWwLfQ8kUIJyxrYyqCOwUZa+Oli6SNICFo
         cXU793rRgSJ9vtejHTcu/M0yiMDtM2fmBGOv7q5nFOx24b3HGrrZv5HWEXSsLzknHuQf
         6xyqD9V3WsTnvBBSO9fwe593vLZZFoe/G/UF4gpXkX0bcbZqXclg45hVAiQhzPfQsb5F
         ujldVTLthHk9vi4OergDNSIivNe/XkkUnf+9J8uyMpsSuvpux9Ab/pifoy78t0XP81wZ
         W9+MFJbcLhBYyyFu8fQzXtnDcUUC46lzRGxowRyB0itXEFRxfY/xxNhJQ2iDQn3m7/me
         Vt+A==
X-Gm-Message-State: AOAM531wx8rN4sSIsSnxt24+MPe85wmW6mcIW22VOsQligjgtKc6u9aX
        SNx7Hhp9CLSRppOtLl/SemDFjE7R5L/KPTF1VN4=
X-Google-Smtp-Source: ABdhPJwIWHz5q90qenAYpugYdiT9Yxd6HnIIsC1LGEkbt3v2uR3WYVl3VGUs+sXgd77GbJQaU4e2lzKxtRJNPEWVqM4=
X-Received: by 2002:a25:7717:: with SMTP id s23mr440397ybc.459.1606948285356;
 Wed, 02 Dec 2020 14:31:25 -0800 (PST)
MIME-Version: 1.0
References: <20201202111816.92279-1-toke@redhat.com>
In-Reply-To: <20201202111816.92279-1-toke@redhat.com>
From:   Andrii Nakryiko <andrii.nakryiko@gmail.com>
Date:   Wed, 2 Dec 2020 14:31:13 -0800
Message-ID: <CAEf4BzZd0iE66Vf31bSwsnTmo-Ms+7QzMDeevCCDP1HNKr3k5w@mail.gmail.com>
Subject: Re: [PATCH bpf v2] libbpf: sanitise map names before pinning
To:     =?UTF-8?B?VG9rZSBIw7hpbGFuZC1Kw7hyZ2Vuc2Vu?= <toke@redhat.com>
Cc:     Daniel Borkmann <daniel@iogearbox.net>,
        Alexei Starovoitov <ast@fb.com>,
        Andrii Nakryiko <andrii@kernel.org>, bpf <bpf@vger.kernel.org>,
        Networking <netdev@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable
Precedence: bulk
List-ID: <netdev.vger.kernel.org>
X-Mailing-List: netdev@vger.kernel.org

On Wed, Dec 2, 2020 at 3:19 AM Toke H=C3=B8iland-J=C3=B8rgensen <toke@redha=
t.com> wrote:
>
> When we added sanitising of map names before loading programs to libbpf, =
we
> still allowed periods in the name. While the kernel will accept these for
> the map names themselves, they are not allowed in file names when pinning
> maps. This means that bpf_object__pin_maps() will fail if called on an
> object that contains internal maps (such as sections .rodata).
>
> Fix this by replacing periods with underscores when constructing map pin
> paths. This only affects the paths generated by libbpf when
> bpf_object__ping_maps() is called with a path argument. Any pin paths set
> by bpf_map__set_pin_path() are unaffected, and it will still be up to the
> caller to avoid invalid characters in those.
>
> Fixes: 113e6b7e15e2 ("libbpf: Sanitise internal map names so they are not=
 rejected by the kernel")
> Signed-off-by: Toke H=C3=B8iland-J=C3=B8rgensen <toke@redhat.com>
> ---
> v2:
>   - Move string munging to helper function
>
>  tools/lib/bpf/libbpf.c | 18 ++++++++++++++++--
>  1 file changed, 16 insertions(+), 2 deletions(-)
>
> diff --git a/tools/lib/bpf/libbpf.c b/tools/lib/bpf/libbpf.c
> index 8d05132e1945..08ff7783fb93 100644
> --- a/tools/lib/bpf/libbpf.c
> +++ b/tools/lib/bpf/libbpf.c
> @@ -7651,6 +7651,20 @@ bool bpf_map__is_pinned(const struct bpf_map *map)
>         return map->pinned;
>  }
>
> +static char *sanitize_pin_path(char *str)

don't want to be unnecessarily nitpicky, but the return of char *
suggests that this function might be allocating new string, so it's a
bit misleading. doing void function and having non-const char *str
feels most appropriate for this. Nice side-benefit: the implementation
will be even shorter :)


> +{
> +       char *s =3D str;
> +
> +       /* bpffs disallows periods in path names */
> +       while (*s) {
> +               if (*s =3D=3D '.')
> +                       *s =3D '_';
> +               s++;
> +       }
> +
> +       return str;
> +}
> +
>  int bpf_object__pin_maps(struct bpf_object *obj, const char *path)
>  {
>         struct bpf_map *map;
> @@ -7680,7 +7694,7 @@ int bpf_object__pin_maps(struct bpf_object *obj, co=
nst char *path)
>                                 err =3D -ENAMETOOLONG;
>                                 goto err_unpin_maps;
>                         }
> -                       pin_path =3D buf;
> +                       pin_path =3D sanitize_pin_path(buf);
>                 } else if (!map->pin_path) {
>                         continue;
>                 }
> @@ -7724,7 +7738,7 @@ int bpf_object__unpin_maps(struct bpf_object *obj, =
const char *path)
>                                 return -EINVAL;
>                         else if (len >=3D PATH_MAX)
>                                 return -ENAMETOOLONG;
> -                       pin_path =3D buf;
> +                       pin_path =3D sanitize_pin_path(buf);
>                 } else if (!map->pin_path) {
>                         continue;
>                 }
> --
> 2.29.2
>
