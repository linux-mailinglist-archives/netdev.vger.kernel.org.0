Return-Path: <netdev-owner@vger.kernel.org>
X-Original-To: lists+netdev@lfdr.de
Delivered-To: lists+netdev@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.lfdr.de (Postfix) with ESMTP id 37F2121FE9
	for <lists+netdev@lfdr.de>; Fri, 17 May 2019 23:52:44 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728819AbfEQVwi (ORCPT <rfc822;lists+netdev@lfdr.de>);
        Fri, 17 May 2019 17:52:38 -0400
Received: from mail-yw1-f65.google.com ([209.85.161.65]:46258 "EHLO
        mail-yw1-f65.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1727239AbfEQVwi (ORCPT
        <rfc822;netdev@vger.kernel.org>); Fri, 17 May 2019 17:52:38 -0400
Received: by mail-yw1-f65.google.com with SMTP id a130so3283842ywe.13
        for <netdev@vger.kernel.org>; Fri, 17 May 2019 14:52:37 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20161025;
        h=mime-version:references:in-reply-to:from:date:message-id:subject:to
         :cc;
        bh=wYhIuig+VV+/+TgW3Np1E7BSK8Yo1fG48iNAXRoWo3k=;
        b=V8MWRHbpu3lcQ7QvpaSfH0+yqfoII+XCW+xe3gMY6H2+0MUorJDMW3lV4iNSEJkBLg
         oBZ9AtGDhP3sEM+Xddp37jIzqQclE8Fgt95hQBF1I2jWiYlSyd1hwa6LFCXnVin+3/Nd
         yqf5Uqby9k9fxVWMB6asZv9DtoLMQTlUIxTgQDrI8dFr5Of8oWpMvK4PUq/dYsTmTimr
         6zrN3eDUKsufWh2IaBazwdb+CvdpJtlGi1hYha3OKx74BPV4g7asN2aDyqiFweuE+QOS
         SgLzqZU5uTm8M5j/EVsvMj0GhZ554m78V+MV9hNj2ugL/MtlI1R3y1B5tc2GxRHc26lN
         FS1w==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:mime-version:references:in-reply-to:from:date
         :message-id:subject:to:cc;
        bh=wYhIuig+VV+/+TgW3Np1E7BSK8Yo1fG48iNAXRoWo3k=;
        b=rNW4D/0nULT1tLPiLwYQAD5DWnopJXcjrGRV/QEhHmMS6k4uC9B9gdHCezrGBNMFwt
         +L0Utz/QHhbSNRpyl1iIKWGA106dClLFYyCOtapXEhEeMLRtCMhv5d8kllCydiW4Gtyi
         9XxSHRS2UQmgjygEFK77ssnXHXKv2ShV9wGxTg7WpKPQnzg2+dGBJK0btw7CpGfCjDeK
         NE5pvuvVFiwfwcib6/CY3g8sfCN3oi3Wun4gYcYzERFsNJ/Xm3d2KVhEmgZ8OKp4OJtH
         8O4tYhWUOa8Ar3miLzZlRLu+mSQm7JQAiEekXNbCaRN9V11NdIecKRuKP+mL9Zv7fglh
         OJHA==
X-Gm-Message-State: APjAAAVB5gqUq6OlrNM4jZlqz5BTcdm1DXFbdNwmc1NgvhMfhVhG1daH
        PBBzXIGiul/+gNLkT3favTX2KkaS
X-Google-Smtp-Source: APXvYqz7wlvsll42xjW22W3oOXPlJ5nlrCPAU6NVsbuX8K4NfqzkSj+XE1E6ocz+Lh3dD/EOCpa1Bg==
X-Received: by 2002:a81:a0c8:: with SMTP id x191mr25837483ywg.67.1558129956812;
        Fri, 17 May 2019 14:52:36 -0700 (PDT)
Received: from mail-yw1-f52.google.com (mail-yw1-f52.google.com. [209.85.161.52])
        by smtp.gmail.com with ESMTPSA id o1sm870010ywo.79.2019.05.17.14.52.35
        for <netdev@vger.kernel.org>
        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Fri, 17 May 2019 14:52:35 -0700 (PDT)
Received: by mail-yw1-f52.google.com with SMTP id w18so3286032ywa.12
        for <netdev@vger.kernel.org>; Fri, 17 May 2019 14:52:35 -0700 (PDT)
X-Received: by 2002:a0d:f8c2:: with SMTP id i185mr11915941ywf.494.1558129955332;
 Fri, 17 May 2019 14:52:35 -0700 (PDT)
MIME-Version: 1.0
References: <20190517155625.117835-1-willemdebruijn.kernel@gmail.com> <d7502d42-207b-177e-8f2b-f6645feff051@gmail.com>
In-Reply-To: <d7502d42-207b-177e-8f2b-f6645feff051@gmail.com>
From:   Willem de Bruijn <willemdebruijn.kernel@gmail.com>
Date:   Fri, 17 May 2019 17:51:58 -0400
X-Gmail-Original-Message-ID: <CA+FuTSe62ZxhDAfiuPvF7k53WOj1Mzi-3iYUjQA_JFM_LNUvCQ@mail.gmail.com>
Message-ID: <CA+FuTSe62ZxhDAfiuPvF7k53WOj1Mzi-3iYUjQA_JFM_LNUvCQ@mail.gmail.com>
Subject: Re: [PATCH net-next RFC] ipv6: elide flowlabel check if no exclusive
 leases exist
To:     Eric Dumazet <eric.dumazet@gmail.com>
Cc:     Willem de Bruijn <willemdebruijn.kernel@gmail.com>,
        Network Development <netdev@vger.kernel.org>
Content-Type: text/plain; charset="UTF-8"
Sender: netdev-owner@vger.kernel.org
Precedence: bulk
List-ID: <netdev.vger.kernel.org>
X-Mailing-List: netdev@vger.kernel.org

On Fri, May 17, 2019 at 4:32 PM Eric Dumazet <eric.dumazet@gmail.com> wrote:
>
>
>
> On 5/17/19 8:56 AM, Willem de Bruijn wrote:
> > From: Willem de Bruijn <willemb@google.com>
> >
> > Processes can request ipv6 flowlabels with cmsg IPV6_FLOWINFO.
> > If not set, by default an autogenerated flowlabel is selected.
> >
> > Explicit flowlabels require a control operation per label plus a
> > datapath check on every connection (every datagram if unconnected).
> >
> > This is particularly expensive on unconnected sockets with many
> > connections, such as QUIC.
> >
> > In the common case, where no lease is exclusive, the check can be
> > safely elided, as both lease request and check trivially succeed.
> > Indeed, autoflowlabel does the same (even with exclusive leases).
> >
> > Elide the check if no process has requested an exclusive lease.
> >
> > This is an optimization. Robust applications still have to revert to
> > requesting leases if the fast path fails due to an exclusive lease.
> >
> > This is decidedly an RFC patch:
> > - need to update all fl6_sock_lookup callers, not just udp
> > - behavior should be per-netns isolated
> >
> > Other approaches considered:
> > - a single "get all flowlabels, non-exclusive" flowlabel get request
> >   if set, elide fl6_sock_lookup and fail exclusive lease requests
> >
> > - sysctls (only useful if on by default, with static_branch)
> >   A) "non-exclusive mode", failing all exclusive lease requests:
> >      processes already have to be robust against lease failure
> >   B) just bypass check in fl6_sock_lookup, like autoflowlabel
> >
> > Signed-off-by: Willem de Bruijn <willemb@google.com>
> > ---
> >  include/net/ipv6.h       | 11 +++++++++++
> >  net/ipv6/ip6_flowlabel.c |  6 ++++++
> >  net/ipv6/udp.c           |  8 ++++----
> >  3 files changed, 21 insertions(+), 4 deletions(-)
> >
> > diff --git a/include/net/ipv6.h b/include/net/ipv6.h
> > index daf80863d3a50..8881cee572410 100644
> > --- a/include/net/ipv6.h
> > +++ b/include/net/ipv6.h
> > @@ -17,6 +17,7 @@
> >  #include <linux/hardirq.h>
> >  #include <linux/jhash.h>
> >  #include <linux/refcount.h>
> > +#include <linux/jump_label.h>
> >  #include <net/if_inet6.h>
> >  #include <net/ndisc.h>
> >  #include <net/flow.h>
> > @@ -343,7 +344,17 @@ static inline void txopt_put(struct ipv6_txoptions *opt)
> >               kfree_rcu(opt, rcu);
> >  }
> >
> > +extern struct static_key_false ipv6_flowlabel_exclusive;
> >  struct ip6_flowlabel *fl6_sock_lookup(struct sock *sk, __be32 label);
> > +static inline struct ip6_flowlabel *fl6_sock_verify(struct sock *sk,
> > +                                                 __be32 label)
> > +{
> > +     if (static_branch_unlikely(&ipv6_flowlabel_exclusive))
> > +             return fl6_sock_lookup(sk, label) ? : ERR_PTR(-ENOENT);
> > +
> > +     return NULL;
> > +}
> > +
> >  struct ipv6_txoptions *fl6_merge_options(struct ipv6_txoptions *opt_space,
> >                                        struct ip6_flowlabel *fl,
> >                                        struct ipv6_txoptions *fopt);
> > diff --git a/net/ipv6/ip6_flowlabel.c b/net/ipv6/ip6_flowlabel.c
> > index be5f3d7ceb966..d5f4233b04e0c 100644
> > --- a/net/ipv6/ip6_flowlabel.c
> > +++ b/net/ipv6/ip6_flowlabel.c
> > @@ -57,6 +57,8 @@ static DEFINE_SPINLOCK(ip6_fl_lock);
> >
> >  static DEFINE_SPINLOCK(ip6_sk_fl_lock);
> >
> > +DEFINE_STATIC_KEY_FALSE(ipv6_flowlabel_exclusive);
> > +
> >  #define for_each_fl_rcu(hash, fl)                            \
> >       for (fl = rcu_dereference_bh(fl_ht[(hash)]);            \
> >            fl != NULL;                                        \
> > @@ -98,6 +100,8 @@ static void fl_free_rcu(struct rcu_head *head)
> >  {
> >       struct ip6_flowlabel *fl = container_of(head, struct ip6_flowlabel, rcu);
> >
> > +     if (fl->share != IPV6_FL_S_NONE && fl->share != IPV6_FL_S_ANY)
> > +             static_branch_dec(&ipv6_flowlabel_exclusive);
>
> static_branch_dec() can not be invoked from a rcu call back.
>
> >       if (fl->share == IPV6_FL_S_PROCESS)
> >               put_pid(fl->owner.pid);
> >       kfree(fl->opt);
> > @@ -423,6 +427,8 @@ fl_create(struct net *net, struct sock *sk, struct in6_flowlabel_req *freq,
> >       }
> >       fl->dst = freq->flr_dst;
> >       atomic_set(&fl->users, 1);
> > +     if (fl->share != IPV6_FL_S_ANY)
> > +             static_branch_inc(&ipv6_flowlabel_exclusive);
>
>
> Can this be used by unpriv users ?
>
> If yes, then you want to use static_key_false_deferred instead

Ah of course. Yes, any user can exercise this API. Thanks, Eric. I'll
take a look at both points.
